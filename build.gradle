import java.util.jar.JarFile

plugins {
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'idea'
    id 'io.freefair.lombok' version '3.8.4'
    id 'org.flywaydb.flyway' version '6.0.1'
    id 'jacoco'
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

group = 'com.oku6er'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        groovy.srcDir "$projectDir/src/integrationTest/groovy"
        resources.srcDir "$projectDir/src/integrationTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

test {
    description = 'Runs tests.'
    group = 'verification'
    defaultCharacterEncoding = "UTF-8"
    reports {
        junitXml.enabled = true
        html.enabled = false
    }
    testLogging {
        displayGranularity 1
        showStackTraces = true
        exceptionFormat = 'full'
        events 'STARTED', 'PASSED', 'FAILED', 'SKIPPED'
    }
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    defaultCharacterEncoding = "UTF-8"

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports {
        junitXml.enabled = true
        html.enabled = false
    }
    shouldRunAfter test
    testLogging {
        displayGranularity 1
        showStackTraces = true
        exceptionFormat = 'full'
        events 'STARTED', 'PASSED', 'FAILED', 'SKIPPED'
    }

//    useJUnitPlatform()
}

shadowJar {
    configurations = []

    doFirst {
        Set<String> packages = []
        tasks.getByPath(":testcontainers:shadowJar").configure { configuration ->
            configuration.files.each { jar ->
                def jf = new JarFile(jar)
                jf.entries().each { entry ->
                    def name = entry.name
                    if (name.endsWith(".class")) {
                        packages.add(name.substring(0, name.lastIndexOf('/')))
                    }
                }
                jf.close()
                packages.each { pkg ->
                    pkg = pkg.replaceAll('/', '.')
                    if (!pkg.startsWith("com.github.dockerjava.")) {
                        tasks.shadowJar.relocate(pkg, "org.testcontainers.shaded.${pkg}")
                    }
                }
            }
        }

    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled = true
        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled = false
        csv.enabled = false
    }
}

check.dependsOn integrationTest
check.dependsOn codeCoverageReport

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.hibernate:hibernate-gradle-plugin:5.3.11.Final'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.vladmihalcea:hibernate-types-52:2.4.3'
    implementation 'org.flywaydb:flyway-core'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtime 'org.postgresql:postgresql'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile 'com.h2database:h2:1.4.197'
    testCompile 'org.junit.jupiter:junit-jupiter:5.5.1'

    integrationTestRuntime 'org.codehaus.groovy:groovy-all:2.5.2'
    integrationTestCompile 'org.testcontainers:postgresql:1.12.0'
    integrationTestCompile 'org.testcontainers:spock:1.12.2'
    integrationTestImplementation 'org.spockframework:spock-spring:1.2-groovy-2.5'

}
